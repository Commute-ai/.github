name: Sync Week Field from Features to Subtasks

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: "*/30 * * * *"   # every 30 minutes

permissions:
  issues: write
  contents: read

jobs:
  sync-week-field:
    runs-on: ubuntu-latest
    
    steps:
      - name: Sync Week field from parent features to subtasks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const ORG = 'Commute-ai';
            const PROJECT_NUM = 1;
            
            console.log('Starting sync of Week field from features to subtasks');
            
            // 1. Query the project to get all items with their Week field values
            const projectQuery = `
              query($org: String!, $projNum: Int!) {
                organization(login: $org) {
                  projectV2(number: $projNum) {
                    id
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                            title
                            repository {
                              name
                              owner {
                                login
                              }
                            }
                            labels(first: 10) {
                              nodes {
                                name
                              }
                            }
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldIterationValue {
                              title
                              iterationId
                              field {
                                ... on ProjectV2IterationField {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            // Get the project data
            const projectData = await github.graphql(projectQuery, {
              org: ORG,
              projNum: PROJECT_NUM
            });
            
            const project = projectData.organization.projectV2;
            const allItems = project.items.nodes;
            
            console.log(`Found ${allItems.length} items in project`);
            
            // 2. Find feature issues in .github repo
            const featureIssues = allItems.filter(item => {
              // Check if it's an issue in .github repo
              if (
                !item.content || 
                !item.content.repository || 
                item.content.repository.name !== '.github'
              ) {
                return false;
              }
              
              // Check if it has the 'Feature' label
              const hasFeatureLabel = item.content.labels?.nodes?.some(
                label => label.name.toLowerCase() === 'feature'
              );
              
              return hasFeatureLabel;
            });
            
            console.log(`Found ${featureIssues.length} feature issues`);
            
            // 3. Process each feature issue
            for (const featureIssue of featureIssues) {
              if (!featureIssue.content) continue;
              
              console.log(`\nProcessing feature: ${featureIssue.content.repository.name}#${featureIssue.content.number} - ${featureIssue.content.title}`);
              
              // Get the Week field for this feature
              const weekField = featureIssue.fieldValues.nodes.find(
                fv => fv.field?.name === 'Week' && fv.iterationId
              );
              
              if (!weekField) {
                console.log(`  ‚è≠Ô∏è Feature has no Week field set, skipping`);
                continue;
              }
              
              console.log(`  üìÖ Week: ${weekField.title}`);
              
              // 4. Get all sub-issues for this feature
              const subIssuesQuery = `
                query($featureId: ID!) {
                  node(id: $featureId) {
                    ... on Issue {
                      subIssues(first: 50) {
                        nodes {
                          id
                          number
                          title
                          repository {
                            name
                            owner {
                              login
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const subIssuesData = await github.graphql(subIssuesQuery, {
                  featureId: featureIssue.content.id
                }, {
                  headers: {
                    'GraphQL-Features': 'sub_issues'
                  }
                });
                
                const subIssues = subIssuesData.node.subIssues.nodes;
                
                if (subIssues.length === 0) {
                  console.log(`  ‚ÑπÔ∏è No sub-issues found for this feature`);
                  continue;
                }
                
                console.log(`  ‚úÖ Found ${subIssues.length} sub-issues`);
                
                // 5. Update each sub-issue's Week field to match the parent
                for (const subIssue of subIssues) {
                  console.log(`  üìå Processing sub-issue: ${subIssue.repository.name}#${subIssue.number} - ${subIssue.title}`);
                  
                  // Find this sub-issue in the project
                  const subIssueInProject = allItems.find(item => 
                    item.content?.id === subIssue.id
                  );
                  
                  if (!subIssueInProject) {
                    console.log(`    ‚ö†Ô∏è Sub-issue not found in project, skipping`);
                    continue;
                  }
                  
                  // Check if the Week field already matches
                  const subIssueWeekField = subIssueInProject.fieldValues.nodes.find(
                    fv => fv.field?.name === 'Week'
                  );
                  
                  if (subIssueWeekField && subIssueWeekField.iterationId === weekField.iterationId) {
                    console.log(`    ‚úì Week field already matches (${weekField.title}), no update needed`);
                    continue;
                  }
                  
                  // Update the Week field
                  const updateMutation = `
                    mutation($projId: ID!, $itemId: ID!, $fieldId: ID!, $iterId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { iterationId: $iterId }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;
                  
                  try {
                    await github.graphql(updateMutation, {
                      projId: project.id,
                      itemId: subIssueInProject.id,
                      fieldId: weekField.field.id,
                      iterId: weekField.iterationId
                    });
                    
                    console.log(`    ‚úÖ Updated Week field to "${weekField.title}"`);
                    
                    // Add a comment on the sub-issue
                    try {
                      await github.rest.issues.createComment({
                        owner: subIssue.repository.owner.login,
                        repo: subIssue.repository.name,
                        issue_number: subIssue.number,
                        body: `ü§ñ Week automatically updated to **${weekField.title}** to match parent feature.`
                      });
                    } catch (error) {
                      console.log(`    ‚ö†Ô∏è Could not add comment: ${error.message}`);
                    }
                  } catch (error) {
                    console.log(`    ‚ùå Error updating Week field: ${error.message}`);
                  }
                }
              } catch (error) {
                console.log(`  ‚ùå Error fetching sub-issues: ${error.message}`);
              }
            }
            
            console.log('\n‚úÖ Completed Week field synchronization');
