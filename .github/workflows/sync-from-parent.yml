name: Sync Week from Features to Children

on:
  # Manual trigger
  workflow_dispatch:
  
  # Run every 30 minutes
  schedule:
    - cron: '*/30 * * * *'

permissions:
  issues: write
  contents: read

jobs:
  sync-week-to-children:
    runs-on: ubuntu-latest
    
    steps:
      - name: Sync Week field from Features to their children
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const ORG = 'Commute-ai';
            const PROJECT_NUM = 1;
            
            console.log('üîÑ Starting Week sync from .github repo issues to their children...');
            
            // Query to get all project items from .github repo with sub-issues
            const query = `
              query($org: String!, $projNum: Int!) {
                organization(login: $org) {
                  projectV2(number: $projNum) {
                    id
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                            title
                            repository {
                              name
                              owner {
                                login
                              }
                            }
                            subIssues(first: 50) {
                              nodes {
                                id
                                number
                                title
                                repository {
                                  owner {
                                    login
                                  }
                                  name
                                }
                              }
                            }
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldIterationValue {
                              title
                              iterationId
                              field {
                                ... on ProjectV2IterationField {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            try {
              const data = await github.graphql(query, {
                org: ORG,
                projNum: PROJECT_NUM,
                headers: {
                  'GraphQL-Features': 'sub_issues'
                }
              });
              
              const project = data.organization.projectV2;
              const allItems = project.items.nodes;
              
              // Filter for issues in .github repo that have sub-issues
              const parentIssues = allItems.filter(item => {
                return item.content?.repository?.name === '.github' && 
                       item.content?.subIssues?.nodes?.length > 0;
              });
              
              console.log(`üìã Found ${parentIssues.length} parent issues in .github repo with sub-issues`);
              
              let totalSynced = 0;
              
              // Process each parent issue
              for (const parent of parentIssues) {
                const parentTitle = parent.content.title;
                const parentNumber = parent.content.number;
                
                console.log(`\nüéØ Processing parent issue: .github#${parentNumber} - ${parentTitle}`);
                console.log(`   Found ${parent.content.subIssues.nodes.length} sub-issues`);
                
                // Get parent's Week iteration
                const parentWeek = parent.fieldValues.nodes.find(
                  fv => fv.field?.name === 'Week' && fv.iterationId
                );
                
                if (!parentWeek) {
                  console.log('   ‚ö†Ô∏è Parent has no Week set, skipping');
                  continue;
                }
                
                console.log(`   üìÖ Parent Week: ${parentWeek.title}`);
                
                // Update each sub-issue
                for (const subIssue of parent.content.subIssues.nodes) {
                  const subRepo = subIssue.repository.name;
                  const subNumber = subIssue.number;
                  
                  console.log(`   üìå Syncing sub-issue: ${subRepo}#${subNumber}`);
                  
                  // Find sub-issue in project items
                  const subItem = allItems.find(
                    item => item.content?.id === subIssue.id
                  );
                  
                  if (!subItem) {
                    console.log(`      ‚ö†Ô∏è Sub-issue not in project, skipping`);
                    continue;
                  }
                  
                  // Check if sub-issue already has the same Week
                  const currentWeek = subItem.fieldValues.nodes.find(
                    fv => fv.field?.name === 'Week' && fv.iterationId
                  );
                  
                  if (currentWeek?.iterationId === parentWeek.iterationId) {
                    console.log(`      ‚úÖ Already synced to ${parentWeek.title}`);
                    continue;
                  }
                  
                  // Update the Week field
                  try {
                    const updateMutation = `
                      mutation($projId: ID!, $itemId: ID!, $fieldId: ID!, $iterId: String!) {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: $projId
                          itemId: $itemId
                          fieldId: $fieldId
                          value: { iterationId: $iterId }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }
                    `;
                    
                    await github.graphql(updateMutation, {
                      projId: project.id,
                      itemId: subItem.id,
                      fieldId: parentWeek.field.id,
                      iterId: parentWeek.iterationId
                    });
                    
                    console.log(`      ‚úÖ Updated to ${parentWeek.title}`);
                    totalSynced++;
                    
                  } catch (updateError) {
                    console.log(`      ‚ùå Failed to update: ${updateError.message}`);
                  }
                }
              }
              
              console.log(`\n‚úÖ Sync complete! Updated ${totalSynced} sub-issues.`);
              
            } catch (error) {
              console.error('‚ùå Error during sync:', error.message);
              throw error;
            }
